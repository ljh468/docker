docker의 개념
- 서버 운영에서 인프라 관리와 애플리케이션 작성을 분리하기 위함
- 실행환경, 실행하는 코드, 필요한 라이브러리, 설정파일을 한곳에 정의 ( docker image )
- docker는 원하는 프로그램을 쉽게 실행하기위한 인프라 플랫폼

해결해야하는 문제
이미지를 생성
- 일관성 있게 이미지를 만들 수 있고, 애플리케이션을 실행하는 데 필요한 모든걸을 설정할 수 있는 이미지 필요
이미지를 공유
- 이미지가 어디에서든 잘 전달할 수 있게 만들어 필요한 곳에서 사용 가능해야함
이미지를 실행
- 일관성있게 이미지를 실행해야함

기존 기술과 다른점
- 기존 가상머신(VM)이 존재함
- 기존 가상화 기술(VMware, VirtualBox) 은 하이퍼바이저를 사용해서 여러개의 운영체재를 하나의 호스트에서 생성해 사용하는 방식
- 시스템 자원을 가상화하고, 공간을 생성하는 작업은 하이퍼바이저를 거치기 때문에 성능의 손실이 발생
- 완벽한 OS를 생성할 수 있다는 장점은 있지만 성능 손실이 있음
- 도커는 리눅스의 자체 기능인 chroot, namespace, cgroup기술을 사용해서 프로세스 단위의 격리 환경을 만들기 때문세 성능 손실이 거의 없음
- OS를 따로 가지고 있는 것이 아니기 때문에 이미지의 크기도 매우 작고 host OS의 kernel을 공유해서 사용하므로 성능 손실이 거의 없음

